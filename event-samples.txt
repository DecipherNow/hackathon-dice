DeleteEvent -- deleting a tag
CreateEvent -- Creating a new branch
IssuesEvent -- opening or closing and issue
IssueCommentEvent -- comment on an issue or a pull request
PushEvent -- pushing 1 or more commits to a branch
PullRequestEvent -- creating a PR or merging one
PullRequestReviewCommentEvent -- a comment on a PR referencing code


DeleteEvent:
{created_at} deleted {ref_type} named {ref} in {repo.name}

CreateEvent:
{created_at} created {ref_type} named {ref} in {repo.name}

IssuesEvent:
{created_at} {payload.action} {repo.name}#{payload.issue_number} {payload.issue.title}

IssuesCommentEvent
{created_at} commented on {repo.name}#{payload.issue_number} {payload.issue.body}

PushEvent
{created_at} pushed commit(s) to {payload.ref} in {repo.name}

PullRequestEvent
{created_at} {payload.action} PR {repo.name}#{payload.number} {payload.pull_request.title}
{payload.pull_request.merged_at} merged PR {repo.name}#{payload.number} {payload.pull_request.title}

PullRequetReviewCommentEvent
{created_at} reviewed PR {repo.name}#{payload.pull_request.number}



Commonality...
actor                  .actor.login
created_at             .created_at
id                     .id                         number
action                 .payload.action
                       .payload.comment.diff_hunk      presence denotes this is reviewing code chunk
                       .payload.comment.created_at
                       .payload.comment.updated_at
payload_comment_body   .payload.comment.body
                       .payload.commits[].author.name
                       .payload.commits[].message
payload_issue_number   .payload.issue.number       number
payload_issue_title    .payload.issue.title
                       .payload.issue.comments     number
payload_issue_body     .payload.issue.body
                       .payload.issue.pull_request.uri     presence check for if this PR or Issue
payload_pr_number      .payload.number			number
payload_pr_title       .payload.pull_request.title
payload_pr_body        .payload.pull_request.body
                       .payload.pull_request.created_at
                       .payload.pull_request.updated_at
payload_pr_merged_dt   .payload.pull_request.merged_at
payload_pr_merged      .payload.pull_request.merged
ref                    .payload.ref
ref_type               .payload.ref_type
payload_size           .payload.size               number
repo_name              .repo.name
type                   .type
summaryline



.id					8733306260
.type					IssueCommentEvent
.actor.login				ghershfield
.repo.name				DecipherNow/gm-fabric-jvm
.payload.action				created
.payload.issue.number			176
.payload.issue.title			Multi-threading and multi-process in Fabric MS
.payload.issue.comments			0
.payload.issue.body			We are using Fabric MS as wrapper to an existing service and sending concurrent requests to the MS via https over two-way SSL. Currently the maximum number of requests that can be sent to the MS is _200_. To achieve the similar concurrency we have added below properties in the _parameters.config_ file:\r\n\r\n**-com.deciphernow.server.config.client.numWorkers=200\r\n-com.deciphernow.server.config.client.useSeparatePool=true**\r\n\r\nWe are seeing frequent disconnects in the MS, it seems it is not able to handle those many concurrent requests. Please let us know if there is a way where MS can handle concurrent requests without fail.
.payload.comment.user.login		ghershfield
.payload.comment.created_at		2018-12-11T11:21:30Z
.payload.comment.updated_at		2018-12-11T11:21:30Z
.payload.comment.body			@singlash26 \r\n- Are you on an EC2 or Docker container?\r\n- Is iptables enabled? 
.created_at				2018-12-11T11:21:30Z


.id					8733301802
.type					IssuesEvent
.actor.login				ghershfield
.repo.name				DecipherNow/gm-fabric-jvm
.payload.action				closed
.payload.issue.number			169
.payload.issue.title			Ability to register custom ExceptionManager classes with the HttpRouter


.id					8733071154
.type					IssuesEvent
.actor.login				singlash26
.repo.name				DecipherNow/gm-fabric-jvm
.payload.action				opened
.payload.issue.number			176
.payload.issue.title			Multi-threading and multi-process in Fabric MS
.payload.issue.body			We are using Fabric MS as wrapper to an existing service and sending concurrent requests to the MS via https over two-way SSL. Currently the maximum number of requests that can be sent to the MS is _200_. To achieve the similar concurrency we have added below properties in the _parameters.config_ file:\r\n\r\n**-com.deciphernow.server.config.client.numWorkers=200\r\n-com.deciphernow.server.config.client.useSeparatePool=true**\r\n\r\nWe are seeing frequent disconnects in the MS, it seems it is not able to handle those many concurrent requests. Please let us know if there is a way where MS can handle concurrent requests without fail.
.created_at				2018-12-11T10:41:42Z



.id					8729855987
.type					PullRequestEvent
.actor.login				kaitmore
.repo.name				DecipherNow/gm-ui-components
.payload.action				opened
.payload.number				395
.payload.pull_request.title		fix: tooltip visibility issue
.payload.pull_request.created_at	2018-12-10T21:33:08Z
.payload.pull_request.updated_at	2018-12-10T21:33:08Z
.created_at				2018-12-10T21:33:08Z


.id					8583732061
.type					PullRequestEvent
.actor.login				dougfort
.repo.name				DecipherNow/gm-fabric-go
.payload.action				closed
.payload.number				379
.payload.pull_request.title		fixup for reduced fabric generator
.payload.pull_request.body		 by removing everything but basic  microservice\r\n\r\ncloses #378 \r\n\r\nNote that we don't want to close this until version 1.0.0 (or whatever)\r\nWe'll also needto put out a new homebrew package
.payload.pull_request.merged_at		2018-11-13T20:36:10Z
.payload.pull_request.merged		true
.created_at				2018-11-08T22:13:18Z



.id					8729809859
.type					CreateEvent
.actor.login				kaitmore
.repo.name				DecipherNow/gm-ui-components
.payload.ref_type			branch
.payload.ref				ix-tooltips
.created_at				2018-12-10T21:24:53Z


.id					8729339930
.type					PushEvent
.actor.login				justincely
.repo.name				DecipherNow/gartner
.payload.commits[].author.name		Justin Ely
.payload.commits[].message		Update fibonacci
.created_at				2018-12-10T19:58:10Z


.id					8704897775
.type					PushEvent
.actor.login				kaitmore
.repo.name				DecipherNow/gm-ui-components
.payload.ref				refs/heads/master
.payload.commits[].author.name		Kait Moreno
.payload.commits[].message		refactor: use react-popper positioning engine with tooltip (#393)\n\n* refactor: use react-popper positioning engine with tooltip\r\n\r\n* test: update snaps\r\n\r\n* fix: align tooltip story center\r\n\r\n* test: update tooltip test
.created_at				2018-12-05T20:45:31Z


.id					8544460015
.type					PushEvent
.actor.login				shanberg
.repo.name				DecipherNow/gm-ui-components
.payload.size				7
.payload.ref				refs/heads/prepare-for-trial-usage
.payload.commits[].message		feat: table now uses content color
.payload.commits[].message		feat: setting navards to be unthemed
.payload.commits[].message		feat: themed icons gallery
.payload.commits[].message		feat: themed fieldset
.payload.commits[].message		feat: removing unnecessary theming from appheader
.payload.commits[].message		feat: theming appheader
.payload.commits[].message		feat: updating copyright notice on appfooter
.created_at				2018-11-06T17:52:47Z


.id					8550542143
.type					IssueCommentEvent
.actor.login				alecholmez
.repo.name				DecipherNow/gm-fabric-go
.payload.action				created
.payload.issue.number			377
.payload.issue.title			correctedbug: compute throughput using all transactions for a key
.payload.comment.body			Pulled and tested. Good to go. Just need to address codeclimate
.payload.issue.pull_request.url		https://api.github.com/repos/DecipherNow/gm-fabric-go/pulls/377



.id					8590813207
.type					CreateEvent
.actor.login				ghershfield
.repo.name				DecipherNow/gm-fabric-jvm
.payload.ref_type			tag
.payload.ref				gm-fabric-jvm-0.2.7
.payload.master_branch			master
.created_at				2018-11-14T20:15:43Z



.id					8647531144
.type					PullRequestReviewCommentEvent
.actor.login				arenger
.repo.name				DecipherNow/gm-fabric-jvm
.payload.action				created
.payload.comment.diff_hunk		... when present, denotes reference to code
.payload.comment.body			Is there a way in Scala to provide multiple construction signatures, such that the `modules` are truly _optional_?  Then you wouldn't have to throw in this `Nil` here and elsewhere.  You need that first `Nil` because it comes before the `controllers` which is defined, but when it's on the end...
.created_at				2018-11-21T15:35:43Z


.id					8628045669
.type					DeleteEvent
.actor.login				kaitmore
.repo.name				DecipherNow/gm-ui-components
.payload.ref				v0.7.2
.payload.ref_type			tag
.created_at				2018-11-21T16:23:40Z